import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:mina_s_application5/core/utils/pref_utils.dart';
import 'package:mina_s_application5/core/utils/size_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray100,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.amber700,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.amber700,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 14.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 10.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray800,
          fontSize: 13.fSize,
          fontFamily: 'Sulphur Point',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: 11.fSize,
          fontFamily: 'Sulphur Point',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray70001,
          fontSize: 20.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 16.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 15.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF017CBA),
    secondaryContainer: Color(0XFF4C4C4C),

    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFFC40A0A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber700 => Color(0XFFFEA30B);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFBFDEEE);
  Color get blue50 => Color(0XFFE3F2F9);
  Color get blue5001 => Color(0XFFE4F3F9);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10023 => Color(0X23D4D4D4);
  Color get blueGray900 => Color(0XFF2B2B2B);

  // DeepOrange
  Color get deepOrange50 => Color(0XFFF1E6E6);

  // Gray
  Color get gray100 => Color(0XFFF7F7F7);
  Color get gray300 => Color(0XFFDCD9D9);
  Color get gray30001 => Color(0XFFDDDADA);
  Color get gray400 => Color(0XFFBABABA);
  Color get gray500 => Color(0XFFB0ABAB);
  Color get gray50021 => Color(0X21AAAAAA);
  Color get gray700 => Color(0XFF63656A);
  Color get gray70001 => Color(0XFF55565B);
  Color get gray70060 => Color(0X60565656);
  Color get gray800 => Color(0XFF4A4A4A);
  Color get gray900 => Color(0XFF2A2A2A);

  // LightGreen
  Color get lightGreenA700 => Color(0XFF69E706);
  Color get lightGreenA70001 => Color(0XFF61C414);
  Color get lightGreenA70002 => Color(0XFF62C514);

  // Orange
  Color get orange300 => Color(0XFFFEB741);
  Color get orange50 => Color(0XFFFFF3DF);

  // Purple
  Color get purple100 => Color(0XFFECCCF2);
  Color get purple300 => Color(0XFFCA6DD9);

  // Teal
  Color get teal50 => Color(0XFFDEEBF2);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
